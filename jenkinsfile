#!/usr/bin/env groovy

/**
 * This function checkouts the code from git using git pipeline plugin
 * @param repo
 * @param branchName
 * @return
 */
def gitCheckout(String repo, String branchName) {
    checkout([$class                           : 'GitSCM',
              branches                         : [[name: branchName]],
              doGenerateSubmoduleConfigurations: false,
              extensions                       : [[$class: 'CleanBeforeCheckout'], [$class: 'LocalBranch'], [$class: 'PruneStaleBranch']],
              submoduleCfg                     : [],
              userRemoteConfigs                : [[credentialsId: 'jgitpipelinecreds', url: repo]]])
    //add your own git creds thing
    // add extension of pruning - https://stackoverflow.com/questions/48936345/how-can-i-execute-code-on-prune-stale-remote-tracking-branches-in-jenkins
    // SCM steps: https://www.jenkins.io/doc/pipeline/steps/workflow-scm-step/
}


def readIncrementPattern() {
    //This method reads jgit.version file inside the git repos and takes substring of 5 element after the '=' sign inside that file. adds those values in string format to version array.
    def version = []
    //0th position for release version pattern, 1st postion for hotfix pattern read from file
    def patternValue = readFile(file: 'jgit.version')
    def start = 0
    for (element in patternValue) {
        if (element == '=') {
            def additionValue = patternValue.substring(start + 1, start + 6)
            version.add(additionValue)
        }
        start = start + 1
    }
    finalPositionsOfY = []
    for (element in version) {
        def countPoints = 0
        for (letter in element) {
            if (letter == "y") {
                finalPositionsOfY.add(countPoints)
                break;
            } else if (letter == ".") {
                countPoints = countPoints + 1
            }
        }
    }
    return finalPositionsOfY
}

/**
 * This method calculates the next dev version.
 * The logic is derived from jgit.version file at the root of the codebase.
 *
 * if jgit.version file is not found in the root direction then this function returns the error and pipeline will fail
 * @param currentVersion
 * @return
 */
def getNextDevelopmentVersion(String currentVersion) {
    echo "Calculating next development version from current version ${currentVersion}"
    //0.0.1-SNAPSHOT
    def extractedNumbers = currentVersion.substring(0, 5) + "."
    //0.0.1.
    def values = []
    def start = 0
    def end = 0
    def var = extractedNumbers
    for (element in var) {
        if (element == '.') {
            def additionValue = var.substring(start, end).toInteger()
            values.add(additionValue)
            start = end + 1
        }
        end = end + 1
    }
    try {
        def incrementPattern = readIncrementPattern()
        def releaseVersion = incrementPattern[0]
        def hotFixVersion = incrementPattern[1]
        // echo "${releaseVersion}"
        // echo "${hotFixVersion}"
        if (releaseVersion == 0) {
            values[0] = values[0] + 1

        } else if (releaseVersion == 1) {
            values[1] = values[1] + 1
        } else {
            values[2] = values[2] + 1
        }
        return "${values[0]}.${values[1]}.${values[2]}-SNAPSHOT"
    }
    catch (exception) {
        echo "${exception}"
    }
    //if jgit.version file is not found in the root direction then this function returns the error
    //and pipeline would fail
}

/**
 * This method calculates the release version to input in release-start command.
 * Release version logic is simple - it is current version without '-SNAPSHOT'
 * @param currentVersion
 * @return
 */
def getReleaseVersion(String currentVersion) {
    echo "Calculating next release version from current version ${currentVersion}"
    return currentVersion.substring(0, 5).trim()
}

/**
 * This method finds the current version of given project
 */
def getCurrentVersion() {
    echo "Getting current version"
    withMaven(maven: 'M3') {
        def currentVersion = sh(returnStdout: true,
                script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout --batch-mode -U -e -Dsurefire.useFile=false | tail -n 1').trim()
        echo "Current version is ${currentVersion}"
        return currentVersion
    }
}

/**
 * This function check if the release-*-* branch exist on the given repo or not
 * @return
 */
def isReleaseBranchExists() {

    echo "Checking if release branch exists or not"

    sh 'git branch -a'
    sh 'git branch -r'
    sh 'git branch --list release*'

    // check if this can be done by plugin
    def branchList = sh returnStdout: true, script: "git branch --list release-*.*.*"
    if (branchList.trim() != '') {
        return true
        //means that there exists some repo like release-*.*.*
    }
    return false
    //means that there no existing repo like release-*.*.*
}

/**
 * This method evalutes the difference between given source and target branch.
 * - if the difference is only one and that to only pom module version then this method returns false i.e. repo is not eligible to release
 * - if the difference are more then that means there is some code changes that are eligible to release and jgit:release-start command is executed
 *
 * @return
 */
def checkCodeDifferenceBetweenGivenBranches() {
    def fileName = sh returnStdout: true, script: "git diff --name-only remotes/origin/${params.source} remotes/origin/${params.target}"
    if (fileName.trim() == "pom.xml") {
        def numAns = sh returnStdout: true, script: "git diff --numstat remotes/origin/${params.source} remotes/origin/${params.target}"
        def numOfLines = numAns.substring(0, 2).trim()
        if (numOfLines == '1') {
            def output = sh returnStdout: true, script: "git diff --unified=0 remotes/origin/${params.source} remotes/origin/${params.target}"
            def tag;
            for (int start = 0; start < output.length(); start = start + 1) {
                if (output[start] == '<') {
                    tag = output.substring(start + 1, start + 8)
                    break
                }
            }
            if (tag == 'version') {
                return false
                // false means there are no difference in code in the branches selected
            }
            return true
            // true means that there are some differences in the code in  the branches selected
        }
        return true
    } else if (fileName.trim() == "") {
        return false
    }
    return true
}

def parseInputData(String inputValue) {
    def names = []
    def start = 0
    def end = 0
    def var = inputValue
    for (element in var) {
        if (element == ';') {
            def additionValue = var.substring(start, end)
            names.add(additionValue)
            start = end + 1
        }
        end = end + 1
    }
    return names
}

node {
    properties([
            parameters(
                    [
                            choice(name: 'choice', choices: ['Start-Release', 'End-Release'], description: 'Select Mode'),
                            booleanParam(name: 'debugmode', defaultValue: false, description: 'When debug mode is On, JGIT command will not be executed'),
                            text(name: 'GitRepos', defaultValue: 'http://gitlab/jgittest/jgit_repo1.git;', description: 'Enter the git repos, add a semicolon after each repo'),
                            text(name: 'EmailIds', defaultValue: 'vatsalya.singh.ext@telekom-digital.com;', description: 'Enter the git repos, add a semicolon after each repo'),
                            string(name: 'source', defaultValue: 'dev', description: 'Source Branch of comparison'),
                            // defaultValue to be changed to dev in source and master in target. default value to be set to a company git repo in gitRepos ending by semicolon
                            string(name: 'target', defaultValue: 'master', description: 'Target branch of comparison')
                    ])
    ])

//     tools {
//         maven "M3" // M3 added as the global tool of maven via plugin
//                    // Pipeline Maven Integration Plugin - https://plugins.jenkins.io/pipeline-maven/
//     }

    stage('Operation') {

        def gitRepos = parseInputData(params.GitRepos)
        def emails = parseInputData(params.EmailIds)

        if (params.choice == 'Start-Release') {

            for (gitRepo in gitRepos) {

                echo "Checking out " + gitRepo
                gitCheckout(gitRepo, 'dev')

                def currentVersion = getCurrentVersion()
                def nextDevelopmentVersion = getNextDevelopmentVersion(currentVersion)
                echo "Next development version from current version ${currentVersion} is ${nextDevelopmentVersion}"

                def nextReleaseVersion = getReleaseVersion(currentVersion);
                echo "Next release version from current version ${currentVersion} is ${nextReleaseVersion}"

                def codeDifference = checkCodeDifferenceBetweenGivenBranches()
                echo "Code difference are eligible for release " + codeDifference

                if (codeDifference == false) {
                    echo "Code Repository ${gitRepo} not eligible for release, since no code difference found between branches ${params.source} and ${params.target}"

                } else {

                    echo "Some Changes have been detected between branches ${params.source} and ${params.target} in ${gitRepo}"
                    sh 'git branch'
                    sh 'git checkout dev'
                    sh 'git branch -a'
                    sh 'git branch -r'

                    echo "Debug mode - " + params.debugmode
                    if (!params.debugmode) {
                        withMaven(maven: 'M3') {
                            // def output = sh returnStdout: true, script: "mvn jgitflow:release-start -DallowSnapshots -DpushReleases=true"
                            sh "mvn jgitflow:release-start -DallowSnapshots -DpushReleases=true -Dusername=root -Dpassword=Passw0rd -DreleaseVersion=${nextReleaseVersion} -DdevelopmentVersion=${nextDevelopmentVersion}"
                        }
                    }
                }

            }
        } else if (params.choice == 'End-Release') {

            for (gitRepo in gitRepos) {

                echo "Checking out " + gitRepo
                gitCheckout(gitRepo, 'dev')

                def nextRelease = getNextDevelopmentVersion("1.0.0-SNAPSHOT")
                echo "${nextRelease}"

                def releaseBranchExists = isReleaseBranchExists()
                if (releaseBranchExists == true) {
                    sh 'git branch'
                    sh 'git checkout dev'
                    sh 'git branch -a'
                    sh 'git branch -r'
                    echo "Run maven command for ending the release"

                    echo "Debug mode" + params.debugmode
                    if (!params.debugmode) {
                        withMaven(maven: 'M3') {
                            sh 'mvn --version'
                            def output = sh returnStdout: true, script: "mvn jgitflow:release-finish -DallowSnapshots -DperformRelease=false -DpushReleases=true -Dusername=root -Dpassword=Passw0rd"
                            echo output
                        }
                    }
                } else {
                    echo "No release branch exist for " + gitRepo
                }

            }
        }
    }
}
