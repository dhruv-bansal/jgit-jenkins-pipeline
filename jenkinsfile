#!/usr/bin/env groovy

/**
 * This function checkouts the code from git using git pipeline plugin
 * @param repo
 * @param branchName
 * @return
 */
def gitCheckout(String repo, String branchName) {
    checkout([$class                           : 'GitSCM',
              branches                         : [[name: '*/' + branchName]],
              doGenerateSubmoduleConfigurations: false,
              extensions                       : [[$class: 'CleanBeforeCheckout'], [$class: 'PruneStaleBranch']],
              submoduleCfg                     : [],
              userRemoteConfigs                : [[credentialsId: 'jgitpipelinecreds', url: repo]]])
    //add your own git creds thing
    // add extension of pruning - https://stackoverflow.com/questions/48936345/how-can-i-execute-code-on-prune-stale-remote-tracking-branches-in-jenkins
}

/**
 * This function delete all the local branches from the git
 * @return
 */
def deleteLocalBranches() {
    echo "Delete local branches"
    sh "git branch --merged | grep -v \\* | xargs git branch -D"
}

/**
 *
 * @return
 */
def sycnLocalBranchesWithRemote() {
    sh 'git remote prune origin'
}

/**
 * This function check if the release-*-* branch exist on the given repo or not
 * @return
 */
def isReleaseBranchExists() {
    //git branch -r --list origin/release-*.*.*
    // what will you guys use in your scenario above one or bottom one
    def branchList = sh returnStdout: true, script: "git branch --list release-*.*.*"
    if (branchList.trim() != '') {
        return true
        //means that there exists some repo like release-*.*.*
    }
    return false
    //means that there no existing repo like release-*.*.*
}

/**
 * This method evalutes the difference between given source and target branch.
 * - if the difference is only one and that to only pom module version then this method returns false i.e. repo is not eligible to release
 * - if the difference are more then that means there is some code changes that are eligible to release and jgit:release-start command is executed
 *
 * @return
 */
def checkCodeDifferenceBetweenGivenBranches() {
    def fileName = sh returnStdout: true, script: "git diff --name-only remotes/origin/${params.source} remotes/origin/${params.target}"
    if (fileName.trim() == "pom.xml") {
        def numAns = sh returnStdout: true, script: "git diff --numstat remotes/origin/${params.source} remotes/origin/${params.target}"
        def numOfLines = numAns.substring(0, 2).trim()
        if (numOfLines == '1') {
            def output = sh returnStdout: true, script: "git diff --unified=0 remotes/origin/${params.source} remotes/origin/${params.target}"
            def tag;
            for (int start = 0; start < output.length(); start = start + 1) {
                if (output[start] == '<') {
                    tag = output.substring(start + 1, start + 8)
                    break
                }
            }
            if (tag == 'version') {
                return false
                // false means there are no difference in code in the branches selected
            }
            return true
            // true means that there are some differences in the code in  the branches selected
        }
        return true
    } else if (fileName.trim() == "") {
        return false
    }
    return true
}

def parseInputData(String inputValue) {
    def names = []
    def start = 0
    def end = 0
    def var = inputValue
    for (element in var) {
        if (element == ';') {
            def additionValue = var.substring(start, end)
            names.add(additionValue)
            start = end + 1
        }
        end = end + 1
    }
    return names
}

node {
    properties([
            parameters(
                    [
                            choice(name: 'choice', choices: ['Start-Release', 'End-Release'], description: 'Select Mode'),
                            booleanParam(name: 'debugmode', defaultValue: true, description: 'When debug mode is On, JGIT command will not be executed'),
                            text(name: 'GitRepos', defaultValue: 'http://gitlab/jgittest/jgit_repo1.git;', description: 'Enter the git repos, add a semicolon after each repo'),
                            text(name: 'EmailIds', defaultValue: 'vatsalya.singh.ext@telekom-digital.com;', description: 'Enter the git repos, add a semicolon after each repo'),
                            string(name: 'source', defaultValue: 'dev', description: 'Source Branch of comparison'),
                            // defaultValue to be changed to dev in source and master in target. default value to be set to a company git repo in gitRepos ending by semicolon
                            string(name: 'target', defaultValue: 'master', description: 'Target branch of comparison')
                    ])
    ])

    // tools {
    //     maven 'M3' // M3 added as the global tool of maven via plugin
    //                // Pipeline Maven Integration Plugin - https://plugins.jenkins.io/pipeline-maven/
    // }

    stage('Operation') {

        def gitRepos = parseInputData(params.GitRepos)
        def emails = parseInputData(params.EmailIds)

        if (params.choice == 'Start-Release') {

            for (gitRepo in gitRepos) {

                echo "Checking out " + gitRepo
                gitCheckout(gitRepo, 'dev')


                def codeDifference = checkCodeDifferenceBetweenGivenBranches()
                echo "Code difference are eligible for release " + codeDifference

                if (codeDifference == false) {
                    echo "Code Repository ${gitRepo} not eligible for release, since no code difference found between branches ${params.source} and ${params.target}"

                } else {

                    echo "Some Changes have been detected between branches ${params.source} and ${params.target} in ${gitRepo}"
                    sh 'git branch'
                    sh 'git checkout dev'
                    sh 'git branch -a'
                    sh 'git branch -r'

                    echo "Debug mode" + params.debugmode
                    if (!params.debugmode) {
                        withMaven(maven: 'M3') {
                            // def output = sh returnStdout: true, script: "mvn jgitflow:release-start -DallowSnapshots -DpushReleases=true"
                            sh 'mvn --version'
                            def output = sh returnStdout: true, script: "mvn jgitflow:release-start -DallowSnapshots -DpushReleases=true -Dusername=root -Dpassword=Passw0rd -DreleaseVersion=1.8.0 -DdevelopmentVersion=1.9.0-SNAPSHOT"
                            echo output
                        }
                    }
                }

            }
        } else if (params.choice == 'End-Release') {

            for (gitRepo in gitRepos) {

                echo "Checking out " + gitRepo
                gitCheckout(gitRepo, 'dev')

                def releaseBranchExists = isReleaseBranchExists()
                if (releaseBranchExists == true) {
                    sh 'git branch'
                    sh 'git checkout dev'
                    echo "Run maven command for ending the release"

                    echo "Debug mode" + params.debugmode
                    if (!params.debugmode) {
                        withMaven(maven: 'M3') {
                            sh 'mvn --version'
                            def output = sh returnStdout: true, script: "mvn jgitflow:release-finish -DallowSnapshots -DperformRelease=false -DpushReleases=true -Dusername=root -Dpassword=Passw0rd"
                            echo output
                        }
                    }
                } else {
                    echo "No release branch exist for " + gitRepo
                }

            }
        }
    }
}
